package hw23;
/*
@date 16.02.2024
@author Sergey Bugaienko
*/

/*
Создайте абстрактный класс GameCharacter, который представляет базовый класс для игровых персонажей.

Определите абстрактный метод attack(),
который будет различаться для разных типов персонажей (например, воин атакует мечом, а маг использует магические заклинания).

Создайте несколько конкретных подклассов, представляющих разные типы персонажей, такие как Warrior, Mage, Archer, и т. д.

Переопределите метод attack() для каждого класса.

Создайте массив из игровых персонажей разных типов. Вызовите у каждого метод attack() в цикле.
 */


/*
public: публичный, общедоступный класс или член класса. Поля и методы, объявленные с модификатором public, видны всем классам из текущего пакета и из внешних пакетов.

private: закрытый класс или член класса, противоположность модификатору public. Закрытый класс или член класса доступен только из кода в том же классе.

protected: такой класс или член класса доступен из любого места в текущем классе или пакете или в производных классах, даже если они находятся в других пакетах

Модификатор по умолчанию. Отсутствие модификатора у поля или метода класса предполагает применение к нему модификатора по умолчанию. Такие поля или методы видны всем классам в текущем пакете.

 */


public abstract class GameCharacter {

    protected int health;

    public GameCharacter(int health) {
        this.health = health;
    }

    protected abstract void attack();

    public int getHealth() {
        return health;
    }

    public void setHealth(int health) {
        this.health = health;
    }
}
